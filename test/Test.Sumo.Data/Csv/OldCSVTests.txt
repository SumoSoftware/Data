using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Sumo.Serialization.Csv2;
using System.Text.RegularExpressions;
using System.Reflection;
using Newtonsoft.Json;

namespace Csv2Test {

   public sealed class FieldAttribute : Attribute {
      public FieldAttribute(string fieldName) : base() {
         Name = fieldName;
      }

      public string Name { get; }
   }

   class Test1Dim {
      [Field("<A>")]
      public string A { get; set; }
      [Field("<B>")]
      public string B { get; set; }
      [Field("<C>")]
      public string C { get; set; }
      [Field("<1:D>")]
      public string[] D { get; set; }
      [Field("<E>")]
      public string E { get; set; }
   }

   class Test2Dim {
      [Field("<A>")]
      public string A { get; set; }
      [Field("<B>")]
      public string B { get; set; }
      [Field("<C>")]
      public string C { get; set; }
      [Field("<2:3:DateTime|String|Double:D>")]
      public dynamic[,] D { get; set; }
      [Field("<E>")]
      public int E { get; set; }
   }



   class Program {
      static void Main(string[] args) {
         //TestOneDimArray();
         //TestTwoDimArray();

         Console.ReadLine();
      }

      static void TestOneDimArray() {
         var map = new Dictionary<string, PropertyInfo>();

         var csv = "a,b,c,3,d.0,d.1,d.2,e";
         Console.WriteLine(csv);

         //var csv2Dim = "A,B,C,3,D.0.0,D.0.1,D.1.0,D.1.1,D.2.0,D.2.1,E";
         //Console.WriteLine(csv2Dim);

         var fieldDefs = "<A>,<B>,<C>,<1:D>,<E>";
         //var field2DimDefs = "<A>,<B>,<C>,<2:2:string,string:D>,<E>";
         Console.WriteLine(fieldDefs);

         var type = typeof(Test1Dim);
         var properties = type.GetProperties();
         for (var i = 0; i < properties.Length; ++i) {
            var property = properties[i];
            var field = property.GetCustomAttribute<FieldAttribute>();
            if (field != null) {
               map.Add(field.Name, property);
            }
         }

         var fields = Regex.Replace(fieldDefs, @"\s|\$|#|\[|\]", string.Empty).Split(',');
         var csvColumns = new CsvColumn[fields.Length];

         for (var j = 0; j < fields.Length; ++j) {
            var fieldCode = fields[j];
            PropertyInfo propertyInfo = null;
            CsvColumn column = null;
            if (map.TryGetValue(fieldCode, out propertyInfo)) {
               var fieldIsArray = fieldCode.Contains(":");
               if (fieldIsArray) {
                  if (!propertyInfo.PropertyType.IsArray)
                     throw new Exception($"{type.Name}.{propertyInfo.Name} is not an array.");

                  var arrayType = propertyInfo.PropertyType.GetElementType();
                  switch (fieldCode[1]) {
                     case '1':
                        column = new OneDimensionalArrayColumn(arrayType) { OrdinalPosition = j, Property = propertyInfo };
                        break;
                     case '2':
                        var fieldInfo = fieldCode.Split(':');
                        var secondDimensionLength = int.Parse(fieldInfo[1]);
                        var typeStrings = fieldInfo[2].Split(',');
                        var types = new Type[secondDimensionLength];
                        for (var t = 0; t < secondDimensionLength; ++t)
                           types[t] = Type.GetType(typeStrings[t]);
                        column = new TwoDimensionalArrayColumn(arrayType, secondDimensionLength, types) { OrdinalPosition = j, Property = propertyInfo };
                        break;
                  }
               }
               else
                  column = new CsvColumn { OrdinalPosition = j, Property = propertyInfo };
               csvColumns[j] = column;
            }
         }
         var reader = new CsvReader<Test1Dim>(csvColumns, true);
         var line = reader.ReadLine(csv);
         var json = JsonConvert.SerializeObject(line);
         Console.WriteLine();
         Console.WriteLine(json);
      }

      static void TestTwoDimArray() {
         var map = new Dictionary<string, PropertyInfo>();

         var csv = "a,b,c,3,2018-02-15T23:00:34.3732005-05:00,d.0.0,1.1,2018-02-15T23:00:34.3732005-05:00,d.1.0,2.1,2018-02-15T23:00:34.3732005-05:00,d.2.0,3.1,256";
         Console.WriteLine(csv);

         var fieldDefs = "<A>,<B>,<C>,<2:3:DateTime|String|Double:D>,<E>";
         Console.WriteLine(fieldDefs);

         var type = typeof(Test2Dim);
         var properties = type.GetProperties();
         for (var i = 0; i < properties.Length; ++i) {
            var property = properties[i];
            var field = property.GetCustomAttribute<FieldAttribute>();
            if (field != null) {
               map.Add(field.Name, property);
            }
         }

         var fields = Regex.Replace(fieldDefs, @"\s|\$|#|\[|\]", string.Empty).Split(',');
         var csvColumns = new CsvColumn[fields.Length];

         for (var j = 0; j < fields.Length; ++j) {
            var fieldCode = fields[j];
            PropertyInfo propertyInfo = null;
            CsvColumn column = null;
            if (map.TryGetValue(fieldCode, out propertyInfo)) {
               var fieldIsArray = fieldCode.Contains(":");
               if (fieldIsArray) {
                  if (!propertyInfo.PropertyType.IsArray)
                     throw new Exception($"{type.Name}.{propertyInfo.Name} is not an array.");

                  var arrayType = propertyInfo.PropertyType.GetElementType();
                  switch (fieldCode[1]) {
                     case '1':
                        column = new OneDimensionalArrayColumn(arrayType) { OrdinalPosition = j, Property = propertyInfo };
                        break;
                     case '2':
                        var fieldInfo = fieldCode.Split(':');
                        var secondDimensionLength = int.Parse(fieldInfo[1]);
                        var typeStrings = fieldInfo[2].Split('|');
                        var types = new Type[secondDimensionLength];
                        for (var t = 0; t < secondDimensionLength; ++t)
                           types[t] = Type.GetType($"System.{typeStrings[t]}");
                        column = new TwoDimensionalArrayColumn(arrayType, secondDimensionLength, types) { OrdinalPosition = j, Property = propertyInfo };
                        break;
                  }
               }
               else
                  column = new CsvColumn { OrdinalPosition = j, Property = propertyInfo };
               csvColumns[j] = column;
            }
         }
         var reader = new CsvReader<Test2Dim>(csvColumns, true);
         var line = reader.ReadLine(csv);
         var json = JsonConvert.SerializeObject(line);
         Console.WriteLine();
         Console.WriteLine(json);
      }

      private void ReadTest() {
         //byte[] data = null;
         //using (var file = new FileStream(@"C:\vso\sumo\Sumo\Libraries\Csv2Test\test.csv", FileMode.Open))
         //{
         //    data = new byte[file.Length];
         //    file.Read(data, 0, (int)file.Length);
         //}
         //var csvContent = Encoding.UTF8.GetString(data);

         //var columns = new ReadCsvColumn[3];

         //columns[0] = new ReadCsvColumn();
         //columns[0].Position = 0;
         //columns[0].PropertyName = "Name";
         //columns[0].DefaultValue = "empty";

         //columns[1] = new ReadCsvColumn();
         //columns[1].Position = 1;
         //columns[1].PropertyName = "DoB";

         //columns[2] = new ReadCsvColumn();
         //columns[2].Position = 2;
         //columns[2].PropertyName = "Weight";

         //var reader = new CsvReader<Patient>(columns);
         //var patients = reader.Read(csvContent);
      }
   }

   public class Patient {
      public DateTime DoB { get; set; }
      public string Name { get; set; }
      public double Weight { get; set; }
   }
}
